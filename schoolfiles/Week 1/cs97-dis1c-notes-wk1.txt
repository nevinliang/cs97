CS 97 - Dis 1C - Week 1


ANNOUNCEMENTS
    - assignment submission link is up on ccle (under week 2)

EMACS (QUICK REVIEW)
  - critical 20%
    - start, close/quit
    - access help, tutorial
    - buffers, windows, files
    - editor area, mode/status line, command line
    - split / hide windows (C-x 0, C-x 1, etc.)
    - list open buffers (C-x C-b)
    - switch to a buffer (C-x b)
    - kill buffer (C-x k)
    - open a file (C-x f)
    - write buffer to file, i.e. save (C-x s)
    - navigation (C-a, C-e, C-b, C-f, C-n, C-p)
    - cut, copy, paste, delete (C-k, M-w, C-y, C-d/C-h)
    - search (C-s, C-r)
    - execute an emacs command / action (like M-x shell, etc.)
    - special buffers (scratch, messages, buffer list, etc.)

SHELL SCRIPTING
    - name (shell) itself is a helpful indicator of form and function
    - interpreted environment
    - reads in the latest entered line and executes line by line
    - makes for an interactive experience
    - facilitates user interaction with the operating system
    - command based interaction
    - simpler, reliable and more predictable than graphics based
    - allows one to automate, configure, customize, program
    - demo: 1st set of commands
        - help, info, man -h, etc. - whoami
        - pwd, ls -al
        - printenv, env
        - cat /etc/os-release
        - cat /etc/lsb-release
        - cat /proc/cpuinfo, lscpu
        - ifconfig
        - shell builtins
    - system administration, configuration, customization, servicing, etc.
    - user management (think roles, access, permission, etc.)
    - locale, system time zone, network, printers, email etc.
    - files and document management
        - cd, mv, cp, mkdir, rm
        - ls (listing files)
        - find (searching files)
        - touch (create empty starter files)
    - manage applications and tasks
    - starting applications
        - utility (cat, etc.)
        - sub-shells :
            - editors: vim, emacs, nano
            - database (postgres, mongodb, etc);
            - programming repl env (python, r, node)
            - symbolic math (Mathematica, etc)
            - accounts, business, tax, finance, trading
    - switch application (C-z, jobs, bg, fg)
    - view running applications (ps)
    - stop/kill applications (kill, killall)
    - easiest way to write custom programs (writing shell scripts)
        - input/output, data/information flow
        - options, arguments
        - composing available programs
            - chaining, piping, etc
    - multiple ways to execute shell scripts
